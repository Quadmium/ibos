load socks.maude
load ibos-socket.maude

mod CLIENT is
pr CONFIGURATION .
pr SOCKS .

vars N N' N'' N''' Port : Nat .
vars Address S S' Rest : String .
vars Config : Configuration .
vars Me CM SocketName : Oid .
vars Att : AttributeSet .

op createClient : Nat String -> Msg [ctor msg] .

op client : Nat -> Oid [ctor] .
op Client : -> Cid [ctor] .

op clientManager : -> Oid [ctor] .
op ClientManager : -> Cid [ctor] .

op nextNumber:_ : Nat -> Attribute [ctor] .

sort ClientState .
ops initial connecting sendingHeader readingMethod sendingRequest readingRequestReply sendingWebsiteMsg readingWebsiteMsg : -> ClientState [ctor] .

op state:_ : ClientState -> Attribute [ctor] .
op address:_ : Nat -> Attribute [ctor] .
op port:_ : Nat -> Attribute [ctor] .
op socketName:_ : Oid -> Attribute [ctor] .
op read:_ : String -> Attribute [ctor] .

op clientManagerInConfig : Configuration -> Bool .
eq clientManagerInConfig(< CM : ClientManager | Att > Config) = true .
eq clientManagerInConfig(Config) = false [owise] .


--- From SOCKS maude
op findNth : String String Nat Nat -> FindResult .
eq findNth(S, S', N, 0) = find(S, S', N) .
ceq findNth(S, S', N, N') = findNth(S, S', find(S, S', N) + 1, N' - 1) if N' =/= 0 .

op addressToBytes : String Nat -> String .
--- String address has type 3
eq addressToBytes(S, 3) = char(length(S)) + S .
--- IPV4 address has type 1
ceq addressToBytes(S, 1) = 
  char(N) + char(N') + char(N'') + char(N''')
if
  N := rat(substr(S, 0, findNth(S, ".", 0, 0)), 10) /\
  N' := rat(substr(S, findNth(S, ".", 0, 0) + 1, find(substr(S, findNth(S, ".", 0, 0) + 1, length(S)), ".", 0)), 10) /\
  N'' := rat(substr(S, findNth(S, ".", 0, 1) + 1, find(substr(S, findNth(S, ".", 0, 1) + 1, length(S)), ".", 0)), 10) /\
  N''' := rat(substr(S, findNth(S, ".", 0, 2) + 1, length(S)), 10)
  .

op portToBytes : Nat -> String .
eq portToBytes(N) = char(N quo (2 ^ 8)) + char(N rem (2 ^ 8)) .
--- end From SOCKS

crl [createClientManager] :
  { Config }
=>
  {
    < clientManager : ClientManager | nextNumber: 0 >
    Config
  }
if
  not clientManagerInConfig(Config)
  .

rl [createClient] :
  createClient(Port, Address)
  < CM : ClientManager | nextNumber: N, Att >
=>
  < client(N) : Client | state: initial, address: Address, port: Port, read: "" >
  < CM : ClientManager | nextNumber: s(N), Att >
  .

rl [receive] :
  < Me : Client | socketName: SocketName, read: S, Att >
  received(Me, SocketName, S')
=>
  < Me : Client | socketName: SocketName, read: (S + S'), Att >
  receive(SocketName, Me)
  .

rl [sent] :
  < Me : Client | socketName: SocketName, Att >
  sent(Me, SocketName)
=>
  < Me : Client | socketName: SocketName, Att >
  .

rl [connectToServer] :
  < Me : Client | state: initial, address: Address, port: Port, Att >
=>
  createClientTcpSocket(socketManager, Me, "127.0.0.1", Port)
  < Me : Client | state: connecting, address: Address, port: Port, Att >
  .

rl [connectedToServer] :
  < Me : Client | state: connecting, Att >
  createdSocket(Me, socketManager, SocketName)
=>
  < Me : Client | state: sendingRequest, socketName: SocketName, Att >
  receive(SocketName, Me)
  .
***(
rl [sendHeader] :
  < Me : Client | state: sendingHeader, socketName: SocketName, Att >
=>
  send(SocketName, Me, char(5) + char(1) + char(0))
  < Me : Client | state: readingMethod, socketName: SocketName, Att >
  .

crl [readMethod] :
  < Me : Client | state: readingMethod, socketName: SocketName, read: S, Att >
=>
  < Me : Client | state: sendingRequest, socketName: SocketName, read: Rest, Att >
if
  length(S) >= 2 /\
  Rest := substr(S, 2, length(S))
  .
)

rl [sendRequest] :
  < Me : Client | state: sendingRequest, socketName: SocketName, address: Address, port: Port, Att >
=>
  send(SocketName, Me, char(5) + char(1) + char(0) + char(1) + addressToBytes(Address, 1) + portToBytes(80))
  < Me : Client | state: readingRequestReply, socketName: SocketName, address: Address, port: Port, Att >
  .

crl [readRequestReply] :
  < Me : Client | state: readingRequestReply, socketName: SocketName, read: S, Att >
=>
  < Me : Client | state: sendingWebsiteMsg, socketName: SocketName, read: Rest, Att >
if
  length(S) >= 10 /\
  Rest := substr(S, 10, length(S))
  .

rl [sendWebsiteMsg] : 
  < Me : Client | state: sendingWebsiteMsg, socketName: SocketName, Att >
=>
  send(SocketName, Me, "hello")
  < Me : Client | state: readingWebsiteMsg, socketName: SocketName, Att >
  .

endm

mod UI is
pr CONFIGURATION .
pr CLIENT .
pr IBOS-EXTEND .

op UI : -> Cid .
op ui : -> Oid .

op serverSocket:_ : Oid -> Attribute [ctor] .
op ibosSocket:_ : Oid -> Attribute [ctor] .

op didIt:_ : Nat -> Attribute [ctor] .

vars Att Att' : AttributeSet .
vars Sock NewSock Me : Oid .

op createUI : -> Msg [ctor] .

rl [createUI] : 
  createUI 
=> 
  < ui : UI | didIt: 0 >
  createServerTcpSocket(socketManager, ui, 8080, 5)
  .

rl [createdUISocket] :
  createdSocket(ui, socketManager, Sock)
  < ui : UI | Att >
=>
  < ui : UI | serverSocket: Sock, Att >
  acceptClient(Sock, ui)
  .

rl [acceptedClient] :
  acceptedClient(ui, Sock, "127.0.0.1", NewSock)
  < ui : UI | Att >
=>
  < ui : UI | ibosSocket: NewSock, Att >
  send(NewSock, ui, "MSG-NEW-URL|100.101.102.103|100.101.102.103#")
  .

--- how can we check IBOS is done processing before creating the client other than this?

rl [ibosReady] :
  < display | displayedContent(url("100.101.102.103", "100.101.102.103")), Att' > 
  < ui : UI | didIt: 0, Att >
=>
  < display | displayedContent(url("100.101.102.103", "100.101.102.103")), Att' > 

  createClient(8081, "100.101.102.103")
  < ui : UI | didIt: 1, Att >
  .

rl [ready2] :
  < Me : Client | state: readingWebsiteMsg, read: "100.101.102.103:80#", Att >
  < ui : UI | ibosSocket: Sock, didIt: 1, Att' >
=>
  < ui : UI | ibosSocket: Sock, didIt: 2, Att' >
  send(Sock, ui, "MSG-NEW-URL|100.101.102.104|100.101.102.104#")
  .

rl [ready3] :
  < display | displayedContent(url("100.101.102.104", "100.101.102.104")), Att' > 
  < ui : UI | didIt: 2, Att >
=>
  < display | displayedContent(url("100.101.102.104", "100.101.102.104")), Att' > 
  createClient(8082, "100.101.102.104")
  < ui : UI | didIt: 3, Att >
  .


endm

mod TEST is
pr CONFIGURATION .
pr SOCKS .
pr CLIENT .
pr UI .
pr IBOS-EXTEND .

vars S S' Delim Data Address Rest : String .
vars N Port : Nat .
vars Me : Oid .
vars Att Att' : AttributeSet .

op untilDelim : String String -> String .
op afterDelim : String String -> String .

ceq untilDelim(S, Delim) = Data if 
  N    := find(S, Delim, 0) /\
  Data := substr(S, 0, N) .

ceq afterDelim(S, Delim) = Data if 
  N    := find(S, Delim, 0) /\
  Data := substr(S, N + 1, length(S)) .

op isBufferFullOf : String String -> Bool .

eq isBufferFullOf("", S) = true .
ceq isBufferFullOf(S, S') =
  Data == S' and isBufferFullOf(Rest, S')
if
  Data := untilDelim(S, "#") /\
  Rest := afterDelim(S, "#") /\
  length(S) > 0
  . 

vars Config : Configuration .
vars L L' : String .

--- Invariants for testing
op ISOP : State -> Bool .

eq ISOP(
  {
    < Me : Client | state: readingWebsiteMsg, address: Address, port: Port, read: S, Att >
    Config
  }) = isBufferFullOf(S,  Address + ":" + string(80, 10)) and ISOP({Config}) .

eq ISOP({Config}) = true [owise] .

op IABC : State -> Bool .
eq IABC(
  {
    < Me : Client | address: Address, port: Port, read: S, Att >
    < kernel | displayedTopBar(url(L, L')), Att' >
    Config
  }) = L == L' and L == Address .

eq IABC({Config}) = true [owise] .
--- End invariants

op startTest : -> Configuration [ctor] .

rl [startTest] :
  { startTest }
=>
  {
    <>
    startIBOS
    createUI

  }
  .

endm