***(

search {startTest(4)} =>* (X:State) s.t. not IABC(X:State) using (havoc-keep | ((allowNextAction-keep)! ; (tests)! ; (((client_isolated)! ; (socks)! ; (socket_mock)! ; (ibos-socket)!)* ; not(client_isolated) ; not(socks) ; not(socket_mock) ; not(ibos-socket))))* ; not(allowNextAction-keep) ; not(tests) .

)

load client_isolated.maude

mod UI is
pr CONFIGURATION .
pr PROXYWRAPPER .
pr IBOS-EXTEND .

op UI : -> Cid .
op ui : -> Oid .

op serverSocket:_ : Oid -> Attribute [ctor] .
op ibosSocket:_ : Oid -> Attribute [ctor] .

op nextURL:_ : Nat -> Attribute [ctor] .
op currentURL:_ : Nat -> Attribute [ctor] .
op curAction:_ : Msg -> Attribute [ctor] .
op hasTab:_ : Nat -> Attribute [ctor] .

vars Att Att' : AttributeSet .
vars Sock NewSock Me : Oid .
vars N N' N'' : Nat .
vars S S' : String .
vars M : Msg .
vars B : Bool .

op createUI : -> Msg [ctor] .

op noAction : -> Msg [ctor] .
op switchTabAction : -> Msg [ctor] .
op newUrlAction : -> Msg [ctor] .

op inspect : Nat -> Configuration .

rl [a] : inspect(0) => createUI .
crl [b] : inspect(N) => newUrlAction inspect(N - 1) if N > 0 .
crl [c]: inspect(N) => switchTabAction inspect(N - 1) if N > 0 .

op urlFromNat : Nat -> String .
eq urlFromNat(N) = "0.0.0." + string(N, 10) .

rl [createUI] : 
  createUI 
=> 
  < ui : UI | currentURL: 0, nextURL: 1, curAction: noAction >
  createServerTcpSocket(socketManager, ui, 8080, 5)
  .

rl [createdUISocket] :
  createdSocket(ui, socketManager, Sock)
  < ui : UI | Att >
=>
  < ui : UI | serverSocket: Sock, Att >
  acceptClient(Sock, ui)
  .

rl [acceptedClient] :
  acceptedClient(ui, Sock, "127.0.0.1", NewSock)
  < ui : UI | Att >
=>
  < ui : UI | ibosSocket: NewSock, Att >
  .

rl [newTabUI] :
  < ui : UI | ibosSocket: Sock, currentURL: N', nextURL: N, curAction: noAction, Att >
  newUrlAction
=>
  createProxyClient("127.0.0.1", 8080 + N, urlFromNat(N), 80, urlFromNat(N))
  < ui : UI | ibosSocket: Sock, currentURL: N, nextURL: s(N), curAction: newUrlAction, hasTab: N, Att >
  send(Sock, ui, "MSG-NEW-URL|" + urlFromNat(N) + "|" + urlFromNat(N) + "#")
  .

crl [switchTabUI] :
  < ui : UI | ibosSocket: Sock, currentURL: N', nextURL: N, curAction: noAction, hasTab: N'', Att >
  switchTabAction
=>
  < ui : UI | ibosSocket: Sock, currentURL: N'', nextURL: N, curAction: switchTabAction, Att >
  send(Sock, ui, "MSG-SWITCH-TAB|" +  string(N'' - 1, 10) + "#")
if
  N'' =/= N'
  .

crl [allowNextAction-keep] : 
  < ui : UI | curAction: M, Att >
=>
  < ui : UI | curAction: noAction, Att >
if
  M =/= noAction
  .

--- Only fails with depth >= 4
crl [havoc-keep] :
  < ui : UI | currentURL: (N:Nat), hasTab: (N1:Nat), hasTab: (N2:Nat), hasTab: (N3:Nat), hasTab: (N4:Nat), Att >
=>
  < ui : UI | currentURL: 1, hasTab: (N1:Nat), hasTab: (N2:Nat), hasTab: (N3:Nat), hasTab: (N4:Nat), Att >
if
  N > 1
  .

endm

mod TEST is
pr CONFIGURATION .
pr SOCKS .
pr CLIENT .
pr UI .
pr IBOS-EXTEND .

vars S S' Delim Data Address Address' Rest : String .
vars N Port : Nat .
vars Me Me' : Oid .
vars Att Att' Att'' : AttributeSet .

op untilDelim : String String -> String .
op afterDelim : String String -> String .

ceq untilDelim(S, Delim) = Data if 
  N    := find(S, Delim, 0) /\
  Data := substr(S, 0, N) .

ceq afterDelim(S, Delim) = Data if 
  N    := find(S, Delim, 0) /\
  Data := substr(S, N + 1, length(S)) .

op isBufferFullOf : String String -> Bool .

eq isBufferFullOf("", S) = true .
ceq isBufferFullOf(S, S') =
  Data == S' and isBufferFullOf(Rest, S')
if
  Data := untilDelim(S, "#") /\
  Rest := afterDelim(S, "#") /\
  length(S) > 0
  . 

vars Config Config' : Configuration .
vars L L' : String .

--- Invariants for testing
op ISOP : State -> Bool .

--- Clients in real world (shouldn't run when proxied clients are used)
eq ISOP(
  {
    < Me : Client | state: readingWebsiteMsg, address: Address, port: Port, read: S, Att >
    Config
  }) = isBufferFullOf(S,  Address + ":" + string(80, 10)) and ISOP({Config}) .

--- Search all wrapped clients (will run when proxied clients used)
--- Simpler client description because this client does not need to do proxy relay, so can check read buffer at any state (wont get intermediate proxy handshake flagged as SOP violation)
eq ISOP(
  {
    < Me : ProxyWrapper | intendedAddress: Address, clientWorld: {
      < Me' : Client | port: Port, read: S, Att' >
      Config'
    }, Att >
    Config
  }) = isBufferFullOf(S,  Address + ":" + string(Port, 10)) and ISOP({Config}) .

--- No matches true by default
eq ISOP({Config}) = true [owise] .

op IABC : State -> Bool .
eq IABC(
  {
    < ui : UI | currentURL: N, curAction: noAction, Att >
    < kernel | displayedTopBar(url(L, L')), Att'' >
    Config
  }) = L == urlFromNat(N).

eq IABC({Config}) = true [owise] .
--- End invariants

op startTest : Nat -> Configuration [ctor] .

rl [startTest] :
  { startTest(N) }
=>
  {
    <>
    startIBOS
    inspect(N)
  }
  .

endm