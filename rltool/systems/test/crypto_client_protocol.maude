load socket_mock.maude
load crypto_protocol.maude

mod CLIENT is
pr CONFIGURATION .
pr SOCKET .

vars N N' N'' N''' Port : Nat .
vars Address S S' Rest : String .
vars Config : Configuration .
vars Me CM SocketName : Oid .
vars Att : AttributeSet .

op createClient : String Nat -> Msg [ctor msg] .

op client : Nat -> Oid [ctor] .
op Client : -> Cid [ctor] .

op clientManager : -> Oid [ctor] .
op ClientManager : -> Cid [ctor] .

op nextNumber:_ : Nat -> Attribute [ctor] .

sort ClientState .
ops initial connecting sendingWebsiteMsg readingWebsiteMsg : -> ClientState [ctor] .

op state:_ : ClientState -> Attribute [ctor] .
op address:_ : String -> Attribute [ctor] .
op port:_ : Nat -> Attribute [ctor] .
op socketName:_ : Oid -> Attribute [ctor] .
op read:_ : String -> Attribute [ctor] .

op clientManagerInConfig : Configuration -> Bool .
eq clientManagerInConfig(< CM : ClientManager | Att > Config) = true .
eq clientManagerInConfig(Config) = false [owise] .

crl [createClientManager] :
  { <> Config }
=>
  {
    <>
    Config
    < clientManager : ClientManager | nextNumber: 0 >
  }
if
  not clientManagerInConfig(Config)
  .

rl [createClient] :
  createClient(Address, Port)
  < CM : ClientManager | nextNumber: N, Att >
=>
  < client(N) : Client | state: initial, address: Address, port: Port, read: "" >
  < CM : ClientManager | nextNumber: s(N), Att >
  .

rl [receive] :
  < Me : Client | socketName: SocketName, read: S, Att >
  received(Me, SocketName, S')
=>
  < Me : Client | socketName: SocketName, read: (S + S'), Att >
  receive(SocketName, Me)
  .

rl [sent] :
  < Me : Client | socketName: SocketName, Att >
  sent(Me, SocketName)
=>
  < Me : Client | socketName: SocketName, Att >
  .

rl [connectToServer] :
  < Me : Client | state: initial, address: Address, port: Port, Att >
=>
  createClientTcpSocket(socketManager, Me, Address, Port)
  < Me : Client | state: connecting, address: Address, port: Port, Att >
  .

rl [connectedToServer] :
  < Me : Client | state: connecting, Att >
  createdSocket(Me, socketManager, SocketName)
=>
  < Me : Client | state: sendingWebsiteMsg, socketName: SocketName, Att >
  receive(SocketName, Me)
  .

rl [sendWebsiteMsg] : 
  < Me : Client | state: sendingWebsiteMsg, socketName: SocketName, Att >
=>
  send(SocketName, Me, "Client hello")
  < Me : Client | state: readingWebsiteMsg, socketName: SocketName, Att >
  .
endm

mod SERVER is
pr CONFIGURATION .
pr SOCKET .

vars N N' N'' N''' Port : Nat .
vars Address S S' Rest : String .
vars Config : Configuration .
vars Me CM SocketName SocketName' : Oid .
vars Att : AttributeSet .

op createServer : String Nat -> Msg [ctor msg] .

op server : Nat -> Oid [ctor] .
op Server : -> Cid [ctor] .

op nextNumber:_ : Nat -> Attribute [ctor] .

sort ServerState .
ops initial connecting accepting sendingWebsiteMsg readingWebsiteMsg : -> ServerState [ctor] .

op state:_ : ServerState -> Attribute [ctor] .
op reply:_ : String -> Attribute [ctor] .
op port:_ : Nat -> Attribute [ctor] .
op socketName:_ : Oid -> Attribute [ctor] .
op read:_ : String -> Attribute [ctor] .

op serverManager : -> Oid [ctor] .
op ServerManager : -> Cid [ctor] .

op serverManagerInConfig : Configuration -> Bool .
eq serverManagerInConfig(< CM : ServerManager | Att > Config) = true .
eq serverManagerInConfig(Config) = false [owise] .

crl [createServerManager] :
  { <> Config }
=>
  {
    <>
    Config
    < serverManager : ServerManager | nextNumber: 0 >
  }
if
  not serverManagerInConfig(Config)
  .

rl [createServer] :
  createServer(Rest, Port)
  < CM : ServerManager | nextNumber: N, Att >
=>
  < server(N) : Server | state: initial, reply: Rest, port: Port, read: "" >
  < CM : ServerManager | nextNumber: s(N), Att >
  .

rl [receive] :
  < Me : Server | socketName: SocketName, reply: Rest, read: S, Att >
  received(Me, SocketName, S')
=>
  < Me : Server | socketName: SocketName, reply: Rest, read: (S + S'), Att >
  send(SocketName, Me, Rest)
  .

rl [sent] :
  < Me : Server | socketName: SocketName, Att >
  sent(Me, SocketName)
=>
  < Me : Server | socketName: SocketName, Att >
  .

rl [createServer] :
  < Me : Server | state: initial, port: Port, Att >
=>
  createServerTcpSocket(socketManager, Me, Port, 5)
  < Me : Server | state: connecting, port: Port, Att >
  .

rl [connectedToServer] :
  < Me : Server | state: connecting, Att >
  createdSocket(Me, socketManager, SocketName)
=>
  < Me : Server | state: accepting, Att >
  acceptClient(SocketName, Me)
  .

rl [acceptedClient] :
  < Me : Server | state: accepting, Att >
  acceptedClient(Me, SocketName', Address, SocketName)
=>
  < Me : Server | state: sendingWebsiteMsg, socketName: SocketName, Att >
  receive(SocketName, Me)
  .
endm

mod CRYPTOWRAPPER is
pr ANCESTOR .
pr PROTOCOL .
pr SOCKET .

op cryptoWrapper : Nat -> Oid .
op CryptoWrapper : -> Cid .

op world:_ : State -> Attribute [ctor] .
op connected:_ : Bool -> Attribute [ctor] .
op connection:_ : Oid -> Attribute [ctor] .
op isClient:_ : Bool -> Attribute [ctor] .
op clientOid:_ : Oid -> Attribute [ctor] .
op clientSocketName:_ : Oid -> Attribute [ctor] .

op connect : Oid Oid -> Msg [ctor] .

vars A B SM Me SocketName SocketName' O : Oid .

vars Att Att' Att'' Att''' : AttributeSet .

vars Config Config' : Configuration .

vars S S' Address : String .
vars N N' Port : Nat .

eq connect(A, B) =
  < A : Agent | nextNonce: 0, initSessions: notInitiated(B), respSessions: emptySession >
  < B : Agent | nextNonce: 0, initSessions: emptySession, respSessions: emptySession >
  .

rl [agentsConnected] :
  < A : Agent | initSessions: trustedConnection(B), Att >
  < B : Agent | respSessions: trustedConnection(A), Att' >
  < A : CryptoWrapper | connected: false, Att'' >
  < B : CryptoWrapper | connected: false, Att''' >
=>
  < A : CryptoWrapper | connected: true, connection: B, isClient: true, Att'' >
  < B : CryptoWrapper | connected: true, connection: A, isClient: false, Att''' >
  .

crl [passCreateClient] :
  < A : CryptoWrapper | connection: B, world: { Config createClientTcpSocket(SM, Me, Address, Port) }, isClient: true, Att >
  < B : CryptoWrapper | connection: A, world: { Config' }, Att' >
=>
  < A : CryptoWrapper | connection: B, world: { Config }, isClient: true, clientOid: Me, Att >
  < B : CryptoWrapper | connection: A, world: { Config' createClientTcpSocket(SM, Me, Address, Port) }, Att' >
if
  A =/= B
  .

crl [passCreatedSocket] :
  < A : CryptoWrapper | connection: B, world: { Config }, isClient: true, clientOid: Me, Att >
  < B : CryptoWrapper | connection: A, world: { Config' createdSocket(Me, SM, SocketName) }, Att' >
=>
  < A : CryptoWrapper | connection: B, world: { Config createdSocket(Me, SM, SocketName) }, isClient: true, clientOid: Me, clientSocketName: SocketName, Att >
  < B : CryptoWrapper | connection: A, world: { Config' }, Att' >
if
  A =/= B
  .

crl [passSendFromClient] :
  < A : CryptoWrapper | connection: B, world: { Config send(SocketName, Me, S) }, isClient: true, clientOid: Me, clientSocketName: SocketName, Att >
  < B : CryptoWrapper | connection: A, world: { Config' receive(SocketName', O) }, Att' >
=>
  < A : CryptoWrapper | connection: B, world: { Config }, isClient: true, clientOid: Me, clientSocketName: SocketName, Att >
  < B : CryptoWrapper | connection: A, world: { Config' received(O, SocketName', S) }, Att' >
if
  A =/= B
  .

crl [passReplyFromServer] :
  < A : CryptoWrapper | connection: B, world: { Config receive(SocketName', O)}, isClient: true, clientOid: Me, clientSocketName: SocketName, Att >
  < B : CryptoWrapper | connection: A, world: { Config' < socketManager : SocketManager | connections: (connectionFromTo(N, N', S'),connectionFromTo(N', N, S)), Att'' > }, Att' >
=>
  < A : CryptoWrapper | connection: B, world: { Config received(O, SocketName', S) }, isClient: true, clientOid: Me, clientSocketName: SocketName, Att >
  < B : CryptoWrapper | connection: A, world: { Config' < socketManager : SocketManager | connections: (connectionFromTo(N, N', S'),connectionFromTo(N', N, "")), Att'' > }, Att' >
if
  A =/= B /\ S =/= ""
  .
  
endm

mod TEST is
pr CLIENT .
pr SERVER .

pr CRYPTOWRAPPER .

op null : -> Configuration [ctor] .

op start2 : -> State .
eq start2 = {
    <>
    < cryptoWrapper(0) : CryptoWrapper | world: { <> createClient("127.0.0.1", 1234) }, connected: false >
    < cryptoWrapper(1) : CryptoWrapper | world: { <> createServer("Server Reply", 1234) }, connected: false >

    connect(cryptoWrapper(0), cryptoWrapper(1))

    ---createServer("Server Reply", 1234)
    ---createClient("127.0.0.1", 1234)
  }
  .

endm