load state.maude
load network.maude
load time.maude
load file.maude
load time_wrapper.maude

mod SAMPLER is
pr RANDOM .
pr COUNTER .
pr CONVERSION .
op rand : -> [Float] .
op sampleBernoulli : Float -> [Bool] .
rl rand => float(random(counter) / 4294967295) .
rl sampleBernoulli(P:Float) => rand < P:Float .

op sampleUniform : Int Int -> [Int] .
vars MAX MIN : Int .
rl sampleUniform(MIN, MAX) => rat(floor(rand * float((MAX - MIN) + 1))) + MIN .
endm

mod ASV_WRAPPER_COMMON is 
pr NETWORK .
pr STATE .
pr SAMPLER .
pr TIME .
pr STD-STREAM .

op clientASVWrapper : Oid -> Oid .
op ClientASVWrapper : -> Cid .

op serverASVWrapper : Oid -> Oid .
op ServerASVWrapper : -> Cid .
endm

mod CLIENT_ASV_WRAPPER is
pr ASV_WRAPPER_COMMON .
pr TIME_WRAPPER .

vars A B O D : Oid .
vars M : MessageContent .
vars C C' : Configuration .
vars N I : Nat .
vars Att Att' Att'' : AttributeSet .
vars ST : State .
vars S : String .

vars MSG : Msg .

sort CAWState .
ops waiting startSend sending sendingWaitTimer sent : -> CAWState [ctor] .

op cawState:_ : CAWState -> Attribute [ctor] .
op currentMsg:_ : Msg -> Attribute [ctor] .
op numToSend:_ : Nat -> Attribute [ctor] .
op timer:_ : Oid -> Attribute [ctor] .
op msgID:_ : Nat -> Attribute [ctor] .

op noTimer : -> Oid [ctor] .

op repeat : Msg Nat -> Configuration .
crl repeat(MSG, N) => MSG repeat(MSG, N - 1) if N =/= 0 .
crl repeat(MSG, N) => none if N == 0 .

op getMsgID : String -> Nat .
eq getMsgID(S) = rat(untilDelim(S, ","), 10) .

op createClientASVWrapper : Oid State -> Configuration [ctor] .
eq createClientASVWrapper(A, ST) = 
  < clientASVWrapper(A) : ClientASVWrapper | cawState: waiting, currentMsg: noMsg, world: ST, numToSend: 1, timer: noTimer, msgID: 0 >
  WinitRoute(clientASVWrapper(A))
  .

rl [outgoingMsg] :
  < clientASVWrapper(A) : ClientASVWrapper | cawState: waiting, currentMsg: noMsg, msgID: I, world: {
    (msg M from A to B)
    C
  }, Att >
=>
  < clientASVWrapper(A) : ClientASVWrapper | cawState: startSend, currentMsg: (msg (string(I, 10) + "," + M) from clientASVWrapper(A) to serverASVWrapper(B)), msgID: I, world: {
    C
  }, Att >
  .

rl [startSend] :
  < clientASVWrapper(A) : ClientASVWrapper | cawState: startSend, Att >
=>
  WcreateTimer(timeManager, clientASVWrapper(A))
  < clientASVWrapper(A) : ClientASVWrapper | cawState: sendingWaitTimer, Att >
  .

rl [createdTimer] :
  WcreatedTimer(clientASVWrapper(A), B, O)
  < clientASVWrapper(A) : ClientASVWrapper | cawState: sendingWaitTimer, timer: D, Att >
=>
  < clientASVWrapper(A) : ClientASVWrapper | cawState: sending, timer: O, Att >
  .

rl [sending] :
  < clientASVWrapper(A) : ClientASVWrapper | cawState: sending, currentMsg: MSG, numToSend: N, timer: O, Att >
=>
  repeat(MSG, N)
  write(stdout, A, "Client repeat: " + string(N, 10) + "\n")
  WstartTimer(O, clientASVWrapper(A), oneShot, 1 seconds)
  < clientASVWrapper(A) : ClientASVWrapper | cawState: sent, currentMsg: MSG, numToSend: N, timer: O, Att >
  .

crl [incomingMsg] :
  < clientASVWrapper(B) : ClientASVWrapper | cawState: sent, currentMsg: MSG, numToSend: N, timer: O, msgID: I, world: {
    C
  }, Att >
  (msg M from serverASVWrapper(A) to clientASVWrapper(B))
=>
  WstopTimer(O, clientASVWrapper(A))
  WdeleteTimer(O, clientASVWrapper(A))
  < clientASVWrapper(B) : ClientASVWrapper | cawState: waiting, currentMsg: noMsg, numToSend: 1, timer: noTimer, msgID: s(I), world: {
    (msg M from A to B)
    C
  }, Att >
if
  getMsgID(M) == I
  .

crl [incomingMsgOld] :
  < clientASVWrapper(B) : ClientASVWrapper | msgID: I, Att >
  (msg M from serverASVWrapper(A) to clientASVWrapper(B))
=>
  < clientASVWrapper(B) : ClientASVWrapper | msgID: I, Att >
if
  getMsgID(M) =/= I
  .

rl [timeoutTimer] :
  < clientASVWrapper(A) : ClientASVWrapper | cawState: sent, timer: O, numToSend: N, Att >
  WtimeOut(clientASVWrapper(A), O)
=>
  WdeleteTimer(O, clientASVWrapper(A))
  < clientASVWrapper(A) : ClientASVWrapper | cawState: startSend, timer: noTimer, numToSend: (N * 2), Att >
  .


rl [startedTimer] :
  WstartedTimer(clientASVWrapper(A), O)
=>
  none
  .

rl [stoppedTimer] :
  WstoppedTimer(O, clientASVWrapper(A))
=>
  none
  .

rl [deletedTimer] :
  WdeletedTimer(clientASVWrapper(A), O)
=>
  none
  .

endm

mod SERVER_ASV_WRAPPER is
pr ASV_WRAPPER_COMMON .

vars A B O : Oid .
vars M : MessageContent .
vars C C' : Configuration .
vars Att Att' Att'' : AttributeSet .
vars Buff : Buffer .
vars N N' : Nat .
vars I I' : Int .
vars CT : Nat .
vars S : String .
vars ST : State .

op ctr:_ : Nat -> Attribute [ctor] .
op currentMsg:_ : Msg -> Attribute [ctor] .
op clientMsgID : Oid Int -> Attribute [ctor] .
op msgOrigin : Oid Int -> Oid [ctor] .

op log : Universal -> Configuration [ctor poly(1)] .

op createServerASVWrapper : Oid State -> Configuration [ctor] .
eq createServerASVWrapper(A, ST) = 
  < serverASVWrapper(A) : ServerASVWrapper | msgBuffer: mtB, bufferLen: 0, maxBufferLen: 4, ctr: 0, currentMsg: noMsg, world: ST >
  .

op getMsgID : String -> Nat .
eq getMsgID(S) = rat(untilDelim(S, ","), 10) .

op hasClientID : Oid AttributeSet -> Bool .
eq hasClientID(A, (clientMsgID(A, N), Att)) = true .
eq hasClientID(A, Att) = false [owise] .

crl [incomingMsgFirstTime] :
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: noMsg, Att >
  (msg M from clientASVWrapper(A) to serverASVWrapper(B))
=>
  ---write(stdout, B, "ASV read " + M + " - " + string(getMsgID(M), 10) + "-" + "-1" + "\n")
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: (msg M from clientASVWrapper(msgOrigin(A, getMsgID(M))) to serverASVWrapper(B)), clientMsgID(clientASVWrapper(A), (getMsgID(M) - 1)), Att >
if
  not hasClientID(clientASVWrapper(A), Att)
  .

crl [incomingMsg] :
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: noMsg, clientMsgID(clientASVWrapper(A), I), msgBuffer: Buff, Att >
  (msg M from clientASVWrapper(A) to serverASVWrapper(B))
=>
  ---write(stdout, B, "ASV read " + M + " - " + string(getMsgID(M), 10) + "-" + string(I, 10) + "\n")
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: (msg M from clientASVWrapper(msgOrigin(A, getMsgID(M))) to serverASVWrapper(B)), clientMsgID(clientASVWrapper(A), I), msgBuffer: Buff, Att >
if
  getMsgID(M) > I /\
  not contains(Buff, (msg M from msgOrigin(A, getMsgID(M)) to B))
  .

crl [incomingMsgDrop] :
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: noMsg, clientMsgID(clientASVWrapper(A), I), msgBuffer: Buff, Att >
  (msg M from clientASVWrapper(A) to serverASVWrapper(B))
=>
  ---write(stdout, B, "Drop " + M + " - " + string(getMsgID(M), 10) + "-" + string(I, 10) + "\n")
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: noMsg, clientMsgID(clientASVWrapper(A), I), msgBuffer: Buff, Att >
if
  getMsgID(M) <= I or contains(Buff, (msg M from msgOrigin(A, getMsgID(M)) to B))
  .

crl [incomingMsgNotFull] :
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: (msg M from clientASVWrapper(msgOrigin(A, I)) to serverASVWrapper(B)), msgBuffer: Buff, bufferLen: N, maxBufferLen: N', Att >
=>
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: noMsg, msgBuffer: (Buff, (msg M from msgOrigin(A, I) to B)), bufferLen: s(N), maxBufferLen: N', Att >
  ---write(stdout, B, "Not full\n")
if
  N < N'
  .

crl [incomingMsgFull] :
  < serverASVWrapper(B) : ServerASVWrapper | currentMsg: (msg M from clientASVWrapper(msgOrigin(A, I)) to serverASVWrapper(B)), msgBuffer: Buff, bufferLen: N, maxBufferLen: N', ctr: CT, Att >
=>
  ---write(stdout, A, "ASV full\n")
  ---log((msg string(CT, 10) from A to B), Buff)
  if sampleBernoulli(float(N') / (float(CT) + 1.0))
  then < serverASVWrapper(B) : ServerASVWrapper | currentMsg: noMsg, msgBuffer: replace(Buff, (msg M from msgOrigin(A, I) to B), sampleUniform(0, N' - 1)), 
         bufferLen: N, maxBufferLen: N', ctr: (CT + 1), Att >
  else < serverASVWrapper(B) : ServerASVWrapper | currentMsg: noMsg, msgBuffer: Buff, bufferLen: N, maxBufferLen: N', ctr: (CT + 1), Att >
  fi
if 
  N == N'
  .

op containsIncomingMsgFor : Oid Configuration -> Bool .
eq containsIncomingMsgFor(B, C (msg M from A to B)) = true .
eq containsIncomingMsgFor(B, C) = false [owise] .

op buffToConfig : Buffer -> Configuration .
eq buffToConfig((msg M from A to B), Buff) = (msg M from A to B) buffToConfig(Buff) .
eq buffToConfig(mtB) = none .

op updateMsgIDs : Buffer AttributeSet -> AttributeSet .
eq updateMsgIDs( ((msg M from msgOrigin(A, I) to B), Buff), (clientMsgID(clientASVWrapper(A), I'), Att) ) = updateMsgIDs(Buff, (clientMsgID(clientASVWrapper(A), I), Att)) .
eq updateMsgIDs(Buff, Att) = Att [owise] .

crl [passBuffer] :
  < serverASVWrapper(B) : ServerASVWrapper | msgBuffer: Buff, bufferLen: N, ctr: CT, world: {
    C 
  }, Att >
=>
  write(stdout, B, "Passed buffer down\n")
  < serverASVWrapper(B) : ServerASVWrapper | msgBuffer: mtB, bufferLen: 0, ctr: 0, world: {
    C
    buffToConfig(Buff)
  }, updateMsgIDs(Buff, Att) >
if
  N =/= 0 /\
  not containsIncomingMsgFor(B, C)
  .

rl [outgoingMsg] :
  < serverASVWrapper(A) : ServerASVWrapper | clientMsgID(clientASVWrapper(B), I), world: {
    (msg M from A to msgOrigin(B, I'))
    C
  }, Att >
=>
  write(stdout, A, "Last reply " + string(I', 10) + " pending up to " + string(I, 10) + "\n")
  < serverASVWrapper(A) : ServerASVWrapper | clientMsgID(clientASVWrapper(B), I), world: {
    C
  }, Att >
  (msg string(I', 10) + "," + M from serverASVWrapper(A) to clientASVWrapper(B))
  .

op isWrapped : Oid -> Bool .
eq isWrapped(clientASVWrapper(A)) = true .
eq isWrapped(A) = false [owise] .

--- When using sockets, incoming messages don't know the wrapper structure (since we don't encode message contents yet)
--- This allows a msg without the clientASVWrapper(...) oid to be accepted
crl [rewriteUnwrapped] :
  (msg M from A to serverASVWrapper(B))
=>
  (msg M from clientASVWrapper(A) to serverASVWrapper(B))
if
  not isWrapped(A)
  .

endm

mod PROVISION is
pr ASV_WRAPPER_COMMON .

op provision : Oid -> Oid [ctor] .
op Provision : -> Cid [ctor] .

vars A B O : Oid .
vars M : MessageContent .
vars C C' : Configuration .
vars Att Att' Att'' : AttributeSet .
vars Buff : Buffer .
vars N N' N'' TargetServers K L : Nat .
vars CT : Nat .
vars ST : State .

op serverInitState:_ : State -> Attribute [ctor] .
op worldCtr:_ : Nat -> Attribute [ctor] .
op requestCtr:_ : Nat -> Attribute [ctor] .
op nextWorldIdx:_ : Nat -> Attribute [ctor] .
op k:_ : Nat -> Attribute [ctor] .
op expectedLoadPerSec:_ : Nat -> Attribute [ctor] .

op createProvision : Oid Nat Nat State -> Configuration .
eq createProvision(A, K, L, ST) = 
  < provision(A) : Provision | serverInitState: ST, world(0, ST), worldCtr: 1, nextWorldIdx: 0, requestCtr: 0, k: K, expectedLoadPerSec: L > 
  createTimer(timeManager, provision(A))
  .

rl [createdTimer] :
  createdTimer(provision(A), B, O)
=>
  startTimer(O, provision(A), periodic, 5 seconds)
  .

crl [timeoutNothing] :
  timeOut(provision(A), O)
  < provision(A) : Provision | worldCtr: N, requestCtr: N', k: K, expectedLoadPerSec: L, Att >
=>
  < provision(A) : Provision | worldCtr: N, requestCtr: 0, k: K, expectedLoadPerSec: L, Att >
  write(stdout, A, "Provision timeout - no changes\n")
if
  N' <= 5 * (L * N) * K
  .

crl [timeoutAdd] :
  timeOut(provision(A), O)
  < provision(A) : Provision | serverInitState: ST, worldCtr: N, requestCtr: N', k: K, expectedLoadPerSec: L, Att >
=>
  < provision(A) : Provision | serverInitState: ST, world(N, ST), worldCtr: s(N), requestCtr: 0, k: K, expectedLoadPerSec: L, Att >
  write(stdout, A, "Provision timeout - added server\n")
if
  N' > 5 * (L * N) * K
  .

rl [incomingMsg] :
  (msg M from A to B)
  < provision(B) : Provision | world(N', { C }), nextWorldIdx: N', worldCtr: N'', requestCtr: N, Att >
=>
  ---write(stdout, B, "Provision in " + string(N', 10) + "\n")
  < provision(B) : Provision | world(N', { (msg M from A to B) C }), nextWorldIdx: (s(N') rem N''), worldCtr: N'', requestCtr: s(N), Att >
  .

rl [outgoingMsg] :
  < provision(B) : Provision | world(N, { (msg M from B to A ) C }), Att >
=>
  ---write(stdout, B, "Provision out " + string(N, 10) + "\n")
  < provision(B) : Provision | world(N, { C }), Att >
  (msg M from B to A )
  .

endm