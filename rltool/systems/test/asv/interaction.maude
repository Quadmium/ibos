load state.maude
load network.maude
load blank_wrapper.maude
load tls_wrapper.maude
load socket_wrapper.maude
load asv_wrapper.maude

mod CLIENT_SERVER_SHARED is
pr NETWORK .

op read:_ : String -> Attribute [ctor] .
endm

--- A client that sends a message and reads the response
mod CLIENT is
pr CLIENT_SERVER_SHARED .
pr CONVERSION .
pr STD-STREAM .
pr TIME_WRAPPER .

op target:_ : Oid -> Attribute [ctor] .

sort ClientState .
ops sending waitingStartTime waitingReply waitingEndTime : -> ClientState [ctor] .
op cstate:_ : ClientState -> Attribute [ctor] .

op spam:_ : Nat -> Attribute [ctor] .
op startTime:_ : Nat -> Attribute [ctor] .
op iterations:_ : Nat -> Attribute [ctor] .
op totalTime:_ : Nat -> Attribute [ctor] .

vars A B : Oid .
vars Att : AttributeSet .
vars S S' : String .
vars N N' N'' N''' : Nat .

op createClient : Oid Oid Nat -> Configuration [ctor] .
eq createClient(A, B, N) = 
  < A : Client | cstate: sending, target: B, spam: N, read: "", startTime: 0, iterations: 0, totalTime: 0 >
  WinitRoute(A)
  .

crl [send] :
  < A : Client | cstate: sending, target: B, spam: N, iterations: N', Att >
=>
  < A : Client | cstate: waitingStartTime, target: B, spam: (N - 1), iterations: s(N'), Att >
  WgetTimeSinceEpoch(timeManager, A)
  (msg ("ClientMsg" + string(N, 10)) from A to B)
if
  N > 0
  .

rl [read] :
  < A : Client | cstate: waitingReply, target: B, read: S, Att >
  (msg S' from B to A)
=>
  WgetTimeSinceEpoch(timeManager, A)
  write(stdout, A, "Read success\n")
  < A : Client | cstate: waitingEndTime, target: B, read: (S + S'), Att >
  .

rl [startTime] :
  < A : Client | cstate: waitingStartTime, startTime: N', Att >
  WgotTimeSinceEpoch(A, timeManager, N)
=>
  < A : Client | cstate: waitingReply, startTime: N, Att >
  ---write(stdout, A, "Client start at " + string(N, 10) + "\n")
  .

rl [endTime] :
  < A : Client | cstate: waitingEndTime, startTime: N', iterations: N'', totalTime: N''', Att >
  WgotTimeSinceEpoch(A, timeManager, N)
=>
  < A : Client | cstate: sending, startTime: N', iterations: N'', totalTime: (N''' + (N - N')), Att >
  ---write(stdout, A, "Client end at " + string(N, 10) + "\n")
  ---write(stdout, A, "Client T: " + string(float(N - N') / 1000000000.0) + "\n")
  write(stdout, A, "Client avg T: " + string(float((N''' + (N - N'))) / 1000000000.0 / float(N'')) + "\n")
  .
endm

--- A server that responds to a message
mod SERVER is
pr CLIENT_SERVER_SHARED .

sort ServerState .
ops waiting : -> ServerState [ctor] .
op sstate:_ : ServerState -> Attribute [ctor] .
op reply:_ : String -> Attribute [ctor] .

vars A B : Oid .
vars Att : AttributeSet .
vars S S' R : String .

rl [read] :
  < B : Server | sstate: waiting, reply: R, Att >
  (msg S' from A to B)
=>
  < B : Server | sstate: waiting, reply: R, Att >
  (msg R from B to A)
  .
endm

mod SLOWSERVER is
pr CLIENT_SERVER_SHARED .
pr TIME_WRAPPER .

op SlowServer : -> Cid [ctor] .

sort SlowServerState .
ops waiting ready : -> SlowServerState [ctor] .
op ssstate:_ : SlowServerState -> Attribute [ctor] .
op reply:_ : String -> Attribute [ctor] .
op timer:_ : Oid -> Attribute [ctor] .
op interval:_ : Nat -> Attribute [ctor] .

vars A B O : Oid .
vars Att : AttributeSet .
vars S S' R : String .
vars N : Nat .
vars C : Configuration .

op createSlowServer : Oid Nat String -> Configuration .
eq createSlowServer(B, N, R) =
  < B : SlowServer | ssstate: waiting, reply: R, interval: N >
  WinitRoute(B)
  WcreateTimer(timeManager, B)
  .

op incomingMsgInConfig : Oid Configuration -> Bool .
eq incomingMsgInConfig(B, C (msg S from A to B)) = true .
eq incomingMsgInConfig(B, C) = false [owise] .

rl [createdTimer] :
  < B : SlowServer | ssstate: waiting, interval: N, Att >
  WcreatedTimer(B, A, O)
=>
  < B : SlowServer | ssstate: ready, timer: O, interval: N, Att >
  WstartTimer(O, B, periodic, N)
  .

rl [read] :
  < B : SlowServer | ssstate: ready, reply: R, timer: O, Att >
  (msg S' from A to B)
  WtimeOut(B, O)
=>
  write(stdout, B, "Replied timeout\n")
  < B : SlowServer | ssstate: ready, reply: R, timer: O, Att >
  (msg R from B to A)
  .

crl [ignoreTimeout] :
  < B : SlowServer | ssstate: ready, reply: R, timer: O, Att >
  WtimeOut(B, O)
  C
=>
  write(stdout, B, "Ignored timeout\n")
  < B : SlowServer | ssstate: ready, reply: R, timer: O, Att >
  C
if
  not incomingMsgInConfig(B, C)
  .
endm

mod ATTACKER is
pr CLIENT_SERVER_SHARED .
pr TIME_WRAPPER .
pr CONVERSION .

op Attacker : -> Cid [ctor] .

sort AttackerState .
ops waiting ready : -> AttackerState [ctor] .
op astate:_ : AttackerState -> Attribute [ctor] .
op timer:_ : Oid -> Attribute [ctor] .
op target:_ : Oid -> Attribute [ctor] .
op ctr:_ : Nat -> Attribute [ctor] .

vars A B O : Oid .
vars Att : AttributeSet .
vars S S' R : String .
vars N : Nat .
vars C : Configuration .

op createAttacker : Oid Oid -> Configuration .
eq createAttacker(A, B) =
  < A : Attacker | astate: waiting, target: B, ctr: 100 >
  WinitRoute(A)
  WcreateTimer(timeManager, A)
  .

rl [createdTimer] :
< A : Attacker | astate: waiting, Att >
  WcreatedTimer(A, B, O)
=>
  < A : Attacker | astate: ready, timer: O, Att >
  WstartTimer(O, A, periodic, (1 seconds) quo 5)
  .

rl [read] :
  < A : Attacker | astate: ready, target: B, ctr: N, Att >
  WtimeOut(A, O)
=>
  (msg string(N, 10) + ",M" from A to B)
  < A : Attacker | astate: ready, target: B, ctr: s(N), Att >
  write(stdout, A, "Attacker timeout\n")
  .
endm

--- The overall interaction between client / server in several different scenarios
--- Use "rew start ." or start2 ...
mod INTERACTION is
pr STATE .
pr CLIENT .
pr SERVER .
pr SLOWSERVER .
pr BLANK_WRAPPER .
pr TLS_WRAPPER .
pr CLIENT_SOCKET_WRAPPER .
pr SERVER_SOCKET_WRAPPER .
pr CLIENT_ASV_WRAPPER .
pr SERVER_ASV_WRAPPER .
pr ATTACKER .
pr PROVISION .

subsort String < Oid .

vars A : Oid .

--- No wrappers, just A to B
op start1 : -> State [ctor] .
eq start1 = {
    < "A" : Client | cstate: sending, target: "B", read: "" >
    < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
  }
  .

--- The blank wrapper
op start2 : -> State [ctor] .
eq start2 = {
    < blankWrapper("A") : BlankWrapper | world: {
      < "A" : Client | cstate: sending, target: "B", read: "" >
    } >
    
    < blankWrapper("B") : BlankWrapper | world: {
      < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
    } >
  }
  .
  
--- Nested blank wrappers
op start3 : -> State [ctor] .
eq start3 = {
    < blankWrapper(blankWrapper("A")) : BlankWrapper | world: {
      < blankWrapper("A") : BlankWrapper | world: {
        < "A" : Client | cstate: sending, target: "B", read: "" >
      } >
    } >
    
    
    < blankWrapper(blankWrapper("B")) : BlankWrapper | world: {
      < blankWrapper("B") : BlankWrapper | world: {
        < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
      } >
    } >
    
  }
  .

--- The TLS wrapper
op start4 : -> State [ctor] .
eq start4 = {
    createTLSWrapper("A", {
      < "A" : Client | cstate: sending, target: "B", read: "" >
    })
    
    createTLSWrapper("B", {
      < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
    })
  }
  .

--- Nested blank / TLS wrappers
op start5 : -> State [ctor] .
eq start5 = {
    < blankWrapper(tlsWrapper("A")) : BlankWrapper | world: {
      createTLSWrapper("A", {
        < "A" : Client | cstate: sending, target: "B", read: "" >
      })
    } >
    
    
    < blankWrapper(tlsWrapper("B")) : BlankWrapper | world: {
      createTLSWrapper("B", {
        < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
      })
    } >
    
  }
  .

--- Nested TLS wrappers
op start6 : -> State [ctor] .
eq start6 = {
    createTLSWrapper(tlsWrapper("A"), {
      createTLSWrapper("A", {
        < "A" : Client | cstate: sending, target: "B", read: "" >
      })
    })

    createTLSWrapper(tlsWrapper("B"), {
      createTLSWrapper("B", {
        < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
      })
    })
  }
  .

--- Double Nested TLS wrappers
op start6double : -> State [ctor] .
eq start6double = {
    createTLSWrapper(tlsWrapper(tlsWrapper("A")), {
      createTLSWrapper(tlsWrapper("A"), {
        createTLSWrapper("A", {
          < "A" : Client | cstate: sending, target: "B", read: "" >
        })
      })
    })

    createTLSWrapper(tlsWrapper(tlsWrapper("B")), {
      createTLSWrapper(tlsWrapper("B"), {
        createTLSWrapper("B", {
          < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
        })
      })
    })
  }
  .

--- TLS Wrapper with multiple outgoing connections
op start7 : -> State [ctor] .
eq start7 = {
    createTLSWrapper("A", {
      < "A" : Client | cstate: sending, target: "B", read: "" >
      < "A" : Client | cstate: sending, target: "C", read: "" >
    })
    
    createTLSWrapper("B", {
      < "B" : Server | sstate: waiting, reply: "ServerReply B", read: "" >
    })

    createTLSWrapper("C", {
      < "C" : Server | sstate: waiting, reply: "ServerReply C", read: "" >
    })
  }
  .

--- TLS Wrapper with multiple incoming connections
op start8 : -> State [ctor] .
eq start8 = {
    createTLSWrapper("A", {
      < "A" : Client | cstate: sending, target: "C", read: "" >
    })

    createTLSWrapper("B", {
      < "B" : Client | cstate: sending, target: "C", read: "" >
    })

    createTLSWrapper("C", {
      < "C" : Server | sstate: waiting, reply: "ServerReply", read: "" >
    })
  }
  .

--- TLS Wrapper multiple outgoing plus blank wrappers around it
op start9 : -> State [ctor] .
eq start9 = {
    < blankWrapper(tlsWrapper("A")) : BlankWrapper | world: {
      createTLSWrapper("A", {
        < "A" : Client | cstate: sending, target: "B", read: "" >
        < "A" : Client | cstate: sending, target: "C", read: "" >
      })
    } >
    
    < blankWrapper(tlsWrapper("B")) : BlankWrapper | world: {
      createTLSWrapper("B", {
        < "B" : Server | sstate: waiting, reply: "ServerReply B", read: "" >
      })
    } >

    < blankWrapper(tlsWrapper("C")) : BlankWrapper | world: {
      createTLSWrapper("C", {
        < "C" : Server | sstate: waiting, reply: "ServerReply C", read: "" >
      })
    } >
  }
  .

op start10 : -> State [ctor] .
eq start10 = {
    <>
    < serverSocketWrapper(serverS(serverASVWrapper("B"), 1234)) : ServerSocketWrapper | world: {
      createServerASVWrapper("B", {
        < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
      })
    } >
  }
  .

op start10S : -> State [ctor] .
eq start10S = {
    <>
    < serverSocketWrapper(serverS(serverASVWrapper("B"), 1234)) : ServerSocketWrapper | world: {
      createServerASVWrapper("B", {
        createSlowServer("B", 1 seconds, "ServerReply")
      })
    } >
  }
  .

op start10P : -> State [ctor] .
eq start10P = {
    <>
    < serverSocketWrapper(serverS(serverASVWrapper("B"), 1234)) : ServerSocketWrapper | world: {
      createProvision(serverASVWrapper("B"), 2, 4, {
        createServerASVWrapper("B", {
          < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
        })
      })
    } >
  }
  .

op start10PS : -> State [ctor] .
eq start10PS = {
    <>
    < serverSocketWrapper(serverS(serverASVWrapper("B"), 1234)) : ServerSocketWrapper | world: {
      createProvision(serverASVWrapper("B"), 100000, 1, {
        createServerASVWrapper("B", {
          createSlowServer("B", 1 seconds, "ServerReply")
        })
      })
    } >
  }
  .

op start11 : -> State [ctor] .
eq start11 = {
    <>
    < clientSocketWrapper(clientASVWrapper("A")) : ClientSocketWrapper | cswState: waiting, targetServer: serverC("127.0.0.1", 1234), world: {
      createClientASVWrapper("A", {
        createClient("A", "B", 100) ---< "A" : Client | cstate: sending, target: "B", read: "", spam: 100 >
      })
    } > 
    < clientSocketWrapper("A") : ClientSocketWrapper | cswState: waiting, targetServer: serverC("127.0.0.1", 1234), world: {
      createAttacker("A", "B")
    } > ***(
    < clientSocketWrapper(clientASVWrapper("C")) : ClientSocketWrapper | cswState: waiting, targetServer: serverC("127.0.0.1", 1234), world: {
      createClientASVWrapper("C", {
        < "C" : Client | cstate: sending, target: "B", read: "", spam: 100 >
      })
    } >
    < clientSocketWrapper(clientASVWrapper("D")) : ClientSocketWrapper | cswState: waiting, targetServer: serverC("127.0.0.1", 1234), world: {
      createClientASVWrapper("D", {
        < "D" : Client | cstate: sending, target: "B", read: "", spam: 100 >
      })
    } >)
  }
  .

vars N : Nat .
rl unwrap(serverASVWrapper(A)) => unwrap(A) .
rl unwrap(clientASVWrapper(A)) => unwrap(A) .
rl unwrap(socket(N)) => socket(N) .

op start12 : -> State [ctor] .
eq start12 = {
    <>
    createClientASVWrapper("A", {
      < "A" : Client | cstate: sending, target: "B", read: "", spam: 4 >
    })

    createServerASVWrapper("B", {
      < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
    })
  }
  .

--- To be used with socket_mock
op start13 : -> State [ctor] .
eq start13 = {
    <>
    < serverSocketWrapper(serverS(serverASVWrapper("B"), 1234)) : ServerSocketWrapper | world: {
      createServerASVWrapper("B", {
        < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
      })
    } >
    < clientSocketWrapper(clientASVWrapper("A")) : ClientSocketWrapper | cswState: waiting, targetServer: serverC("127.0.0.1", 1234), world: {
      createClientASVWrapper("A", {
        < "A" : Client | cstate: sending, target: "B", read: "", spam: 4 >
      })
    } >
  }
  .

op start14 : -> State [ctor] .
eq start14 = {
    <>
    createClientASVWrapper("A", {
      < "A" : Client | cstate: sending, target: "B", read: "", spam: 1 >
    })

    createProvision(serverASVWrapper("B"), 2, 4, {
      createServerASVWrapper("B", {
        < "B" : Server | sstate: waiting, reply: "ServerReply", read: "" >
      })
    })
  }
  .

op startA : -> State [ctor] .
eq startA = {
    <>
    < clientSocketWrapper("A") : ClientSocketWrapper | cswState: waiting, targetServer: serverC("127.0.0.1", 1234), world: {
      createAttacker("A", "B")
    } >
  }
  .

op startAM : -> State [ctor] .
eq startAM = {
    <>
    < clientSocketWrapper(clientASVWrapper("A")) : ClientSocketWrapper | cswState: waiting, targetServer: serverC("127.0.0.1", 1234), world: {
      createClientASVWrapper("A", {
        createClient("A", "B", 100) ---< "A" : Client | cstate: sending, target: "B", read: "", spam: 100 >
      })
    } >
    < serverSocketWrapper(serverS(serverASVWrapper("B"), 1234)) : ServerSocketWrapper | world: {
      createProvision(serverASVWrapper("B"), 1000, 1, {
        createServerASVWrapper("B", {
          createSlowServer("B", 1 seconds, "ServerReply")
        })
      })
    } >
    < clientSocketWrapper("A") : ClientSocketWrapper | cswState: waiting, targetServer: serverC("127.0.0.1", 1234), world: {
      createAttacker("A", "B")
    } >
  }
  .
endm