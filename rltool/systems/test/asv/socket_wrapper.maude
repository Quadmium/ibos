load state.maude
load network.maude
---load socket_mock.maude
load socket.maude
load file.maude
load time.maude

mod SAMPLER is
pr RANDOM .
pr COUNTER .
pr CONVERSION .
op rand : -> [Float] .
op sampleBernoulli : Float -> [Bool] .
rl rand => float(random(counter) / 4294967295) .
rl sampleBernoulli(P:Float) => rand < P:Float .
endm

mod SOCKET_WRAPPER_COMMON is
pr NETWORK .
pr STATE .
pr SOCKET .
pr SAMPLER .
pr TIME .
pr STD-STREAM .

op serverC : String Nat -> Oid [ctor] .
op serverS : Oid Nat -> Oid [ctor] .

op untilDelim : String String -> String .
op afterDelim : String String -> String .

vars S Delim Data Rest : String .
vars N : Nat .

ceq untilDelim(S, Delim) = Data if 
  N    := find(S, Delim, 0) /\
  Data := substr(S, 0, N) .

ceq afterDelim(S, Delim) = Data if 
  N    := find(S, Delim, 0) /\
  Data := substr(S, N + 1, length(S)) .
endm

mod CLIENT_SOCKET_WRAPPER is
pr SOCKET_WRAPPER_COMMON .

--- We take the Oid of the client / server represented inside the wrapper as part of its identification
--- This allows wrappers to find each other
op clientSocketWrapper : Oid -> Oid [ctor] .
op ClientSocketWrapper : -> Cid [ctor] .

op targetServer:_ : Oid -> Attribute [ctor] .
op serverOidInWorld:_ : Oid -> Attribute [ctor] .

sort CSWState .
ops waiting connecting closed : -> CSWState [ctor] .
op connected : Oid -> CSWState [ctor] .
op cswState:_ : CSWState -> Attribute [ctor] .

op read:_ : String -> Attribute [ctor] .

vars CSWSTATE : CSWState .
vars A B O Sock : Oid .
vars S S' Address : String .
vars N Port : Nat .
vars M : String .
vars C C' : Configuration .
vars Att Att' Att'' : AttributeSet .
vars Data Rest : String .

rl [connectToServer] :
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: waiting, targetServer: serverC(Address, Port), world: {
    (msg M from A to B)
    C
  }, Att >
=>
  createClientTcpSocket(socketManager, clientSocketWrapper(A), Address, Port)
  write(stdout, A, "Connecting\n")
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: connecting, targetServer: serverC(Address, Port), serverOidInWorld: B, read: "", world: {
    (msg M from A to B)
    C
  }, Att >
  .

rl [connected] :
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: connecting, Att >
  createdSocket(clientSocketWrapper(A), socketManager, Sock)
=>
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: connected(Sock), Att >
  receive(Sock, clientSocketWrapper(A))
  write(stdout, A, "Connected\n")
  .

rl [outgoingMsg] :
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: connected(Sock), world: {
    (msg M from A to B)
    C
  }, Att >
=>
  write(stdout, A, "Outgoing socket msg\n")
  send(Sock, clientSocketWrapper(A), M + ";")
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: connected(Sock), world: {
    C
  }, Att >
  .

rl [received] :
  < clientSocketWrapper(A) : ClientSocketWrapper | read: S, Att >
  received(clientSocketWrapper(A), Sock, S')
=>
  < clientSocketWrapper(A) : ClientSocketWrapper | read: (S + S'), Att >
  receive(Sock, clientSocketWrapper(A))
  .

crl [incomingMsg] :
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: connected(Sock), serverOidInWorld: B, read: S, world: {
    C
  }, Att >
=>
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: connected(Sock), serverOidInWorld: B, read: Rest, world: {
    (msg Data from B to A)
    C
  }, Att >
  write(stdout, A, "Incoming socket msg\n")
if
  length(S) =/= 0 /\
  Data := untilDelim(S, ";") /\
  Rest := afterDelim(S, ";")
  .

rl [sent] :
  sent(clientSocketWrapper(A), Sock)
=>
  none
  .

rl [closed] :
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: CSWSTATE, Att >
  closedSocket(clientSocketWrapper(A), Sock, S)
=>
  write(stdout, A, "Socket closed\n")
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: closed, Att >
  .
  
rl [error] :
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: CSWSTATE, Att >
  socketError(clientSocketWrapper(A), Sock, S)
=>
  write(stdout, A, "Socket error\n")
  < clientSocketWrapper(A) : ClientSocketWrapper | cswState: closed, Att >
  .

endm

mod SERVER_SOCKET_WRAPPER is
pr SOCKET_WRAPPER_COMMON .

--- We take the Oid of the client / server represented inside the wrapper as part of its identification
--- This allows wrappers to find each other
op serverSocketWrapper : Oid -> Oid [ctor] .
op ServerSocketWrapper : -> Cid [ctor] .

op serverSock:_ : Oid -> Attribute [ctor] .
op unwrap : Oid -> Oid [ctor] .

op read : Oid String -> Attribute [ctor] .

op initialized : -> Attribute [ctor] .

vars BOOL : Bool .
vars B B' : Buffer .
vars A O Sock CSock : Oid .
vars S S' Address : String .
vars N N' Port : Nat .
vars M : String .
vars MSG : Msg .
vars C C' : Configuration .
vars Att Att' Att'' : AttributeSet .
vars Data Rest : String .

op receiveOrDrop : Oid Oid Bool -> Configuration [ctor] .

rl [createServer] :
  < serverSocketWrapper(serverS(A, Port)) : ServerSocketWrapper | world: { C } >
=>
  < serverSocketWrapper(serverS(A, Port)) : ServerSocketWrapper | world: { C }, initialized >
  write(stdout, A, "Creating server\n")
  createServerTcpSocket(socketManager, serverSocketWrapper(serverS(A, Port)), Port, 1000)
  .

rl [createdServer] :
  < serverSocketWrapper(A) : ServerSocketWrapper | Att >
  createdSocket(serverSocketWrapper(A), socketManager, Sock)
=>
  < serverSocketWrapper(A) : ServerSocketWrapper | serverSock: Sock, Att >
  acceptClient(Sock, serverSocketWrapper(A))
  .

rl [acceptedClient] :
  < serverSocketWrapper(A) : ServerSocketWrapper | Att >
  acceptedClient(serverSocketWrapper(A), Sock, Address, CSock)
=>
  < serverSocketWrapper(A) : ServerSocketWrapper | read(CSock, ""), Att >
  receive(CSock, serverSocketWrapper(A))
  acceptClient(Sock, serverSocketWrapper(A))
  .

rl [received] :
  < serverSocketWrapper(serverS(A, Port)) : ServerSocketWrapper | read(CSock, S), Att >
  received(serverSocketWrapper(serverS(A, Port)), CSock, S')
=>
  < serverSocketWrapper(serverS(A, Port)) : ServerSocketWrapper | read(CSock, S + S'), Att >
  receive(CSock, serverSocketWrapper(serverS(A, Port)))
  .

crl [incomingMsg] :
  < serverSocketWrapper(serverS(A, Port)) : ServerSocketWrapper | read(CSock, S), world: {
    C
  }, Att >
=>
  < serverSocketWrapper(serverS(A, Port)) : ServerSocketWrapper | read(CSock, Rest), world: {
    (msg Data from CSock to A)
    C
  }, Att >
  write(stdout, A, "Server received\n")
if
  length(S) =/= 0 /\
  Data := untilDelim(S, ";") /\
  Rest := afterDelim(S, ";")
  .

rl [outgoingMsg] :
  < serverSocketWrapper(serverS(A, Port)) : ServerSocketWrapper | world: {
    (msg M from A to CSock)
    C
  }, Att >
=>
  < serverSocketWrapper(serverS(A, Port)) : ServerSocketWrapper | world: {
    C
  }, Att >
  send(unwrap(CSock), serverSocketWrapper(serverS(A, Port)), M + ";")
  write(stdout, A, "Server outgoing\n")
  .

rl [sent] :
  sent(serverSocketWrapper(A), CSock)
=>
  none
  .

rl [closed] :
  closedSocket(serverSocketWrapper(A), CSock, S)
=>
  none
  .

rl [wrote] :
  wrote(A, stdout)
=>
  none
  .

endm