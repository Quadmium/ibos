load crypto.maude

mod PROTOCOL is
pr CRYPTO_OBJECTS .

sort MessageContent .
op msg_from_to_ : MessageContent Oid Oid -> Msg [ctor message] .

subsort Payload < MessageContent .

op _;_ : Payload Payload -> Payload [ctor] .

sort Nonce .
subsort Nonce < Payload .
op nonce : Oid Nat -> Nonce [ctor] .


sorts Sessions InitSessions .
subsort Sessions < InitSessions .
op emptySession : -> Sessions [ctor] .
op notInitiated : Oid -> InitSessions [ctor] .
op initiated : Oid Nonce -> InitSessions [ctor] .
op trustedConnection : Oid -> Sessions [ctor] .

sort RespSessions .
subsort Sessions < RespSessions .
op responded : Oid Nonce -> RespSessions [ctor] .

op Agent : -> Cid [ctor] .
op nextNonce:_ : Nat -> Attribute [ctor] .
op initSessions:_ : InitSessions -> Attribute [ctor] .
op respSessions:_ : RespSessions -> Attribute [ctor] .

vars A B I : Oid .
vars N : Nat .
vars Att : AttributeSet .
vars Nonce Nonce' : Nonce .
vars PL : Payload .

--- Initiate
rl [send-1] :
  < A : Agent | initSessions: (notInitiated(B)), nextNonce: N, Att >
=>
  < A : Agent | initSessions: (initiated(B, nonce(A, N))), nextNonce: s(N), Att >
  (msg enc(nonce(A, N) ; A, pubKey(B)) from A to B)
  .

rl [read-2-send-3] :
  (msg enc(Nonce ; Nonce', pubKey(A)) from B to A)
  < A : Agent | initSessions: (initiated(B, Nonce)), Att >
=>
  < A : Agent | initSessions: (trustedConnection(B)), Att >
  (msg enc(Nonce', pubKey(B)) from A to B)
  .

--- Respond
rl [read-1-send-2] :
  (msg enc(Nonce ; A, pubKey(B)) from A to B)
  < B : Agent | respSessions: emptySession, nextNonce: N, Att >
=>
  < B : Agent | respSessions: (responded(A, nonce(B, N))), nextNonce: s(N), Att >
  (msg enc(Nonce ; nonce(B, N), pubKey(A)) from B to A)
  .

rl [read-3] :
  (msg enc(Nonce, pubKey(B)) from A to B)
  < B : Agent | respSessions: (responded(A, Nonce)), Att >
=>
  < B : Agent | respSessions: (trustedConnection(A)), Att >
  .


--- Attacker
sort NonceSet .
subsort Nonce < NonceSet .
op emptyNonceSet : -> NonceSet [ctor] .
op _ n _ : NonceSet NonceSet -> NonceSet [ctor assoc comm id: emptyNonceSet] .
eq Nonce n Nonce = Nonce .

sort OidSet .
subsort Oid < OidSet .
op emptyOidSet : -> OidSet [ctor] .
op _ o _ : OidSet OidSet -> OidSet [ctor assoc comm id: emptyOidSet] .
eq A o A = A .

sort PayloadSet .
subsort Payload < PayloadSet .
op emptyPayloadSet : -> PayloadSet [ctor] .
op _ p _ : PayloadSet PayloadSet -> PayloadSet [ctor assoc comm id: emptyPayloadSet] .
eq PL p PL = PL .

op Attacker : -> Cid .
op agentsSeen:_ : OidSet -> Attribute .
op noncesSeen:_ : NonceSet -> Attribute .
op encrMsgsSeen:_ : PayloadSet -> Attribute .

vars NS : NonceSet .
vars OS : OidSet .
vars PS : PayloadSet .

--- Normal interactions
--- Initiate
rl [attacker-send-1] :
  < A : Attacker | initSessions: (notInitiated(B)), nextNonce: N, agentsSeen: OS, noncesSeen: NS, Att >
=>
  < A : Attacker | initSessions: (initiated(B, nonce(A, N))), nextNonce: s(N), agentsSeen: (B o OS), noncesSeen: (nonce(A, N) n NS), Att >
  (msg enc(nonce(A, N) ; A, pubKey(B)) from A to B)
  .

rl [attacker-read-2-send-3] :
  (msg enc(Nonce ; Nonce', pubKey(A)) from B to A)
  < A : Attacker | initSessions: (initiated(B, Nonce)), noncesSeen: NS, Att >
=>
  < A : Attacker | initSessions: (trustedConnection(B)), noncesSeen: (Nonce' n NS), Att >
  (msg enc(Nonce', pubKey(B)) from A to B)
  .

--- Respond
--- Change to Na ; Nb ; B to fix exploit
rl [attacker-read-1-send-2] :
  (msg enc(Nonce ; A, pubKey(B)) from A to B)
  < B : Attacker | respSessions: emptySession, nextNonce: N, agentsSeen: OS, noncesSeen: NS, Att >
=>
  < B : Attacker | respSessions: (responded(A, nonce(B, N))), nextNonce: s(N), agentsSeen: (A o OS), noncesSeen: (Nonce n nonce(B, N) n NS), Att >
  (msg enc(Nonce ; nonce(B, N), pubKey(A)) from B to A)
  .

rl [attacker-read-3] :
  (msg enc(Nonce, pubKey(B)) from A to B)
  < B : Attacker | respSessions: (responded(A, Nonce)), Att >
=>
  < B : Attacker | respSessions: (trustedConnection(A)), Att >
  .

--- Attacker interactions

crl [intercept-but-not-understand] :
  (msg PL from A to B)
  < I : Attacker | agentsSeen: OS, encrMsgsSeen: PS, Att >
=>
  < I : Attacker | agentsSeen: (A o B o OS), encrMsgsSeen: (PL p PS), Att >
if
  B =/= I .

rl [intercept-msg1-and-understand] :
  (msg enc(Nonce ; A, pubKey(I)) from B to I)
  < I : Attacker | agentsSeen: OS, noncesSeen: NS, Att >
=>
  < I : Attacker | agentsSeen: (A o B o OS), noncesSeen: (Nonce n NS), Att >
.

rl [intercept-msg2-and-understand] :
  (msg enc(Nonce ; Nonce', pubKey(I)) from B to I)
  < I : Attacker | agentsSeen: OS, noncesSeen: NS, Att >
=>
  < I : Attacker | agentsSeen: (B o OS), noncesSeen: (Nonce n Nonce' n NS), Att >
.

rl [intercept-msg3-and-understand] :
  (msg enc(Nonce, pubKey(I)) from B to I)
  < I : Attacker | agentsSeen: OS, noncesSeen: NS, Att >
=>
  < I : Attacker | agentsSeen: (B o OS), noncesSeen: (Nonce n NS), Att >
.

crl [send-encrypted] :
  < I : Attacker | agentsSeen: (A o OS), encrMsgsSeen: (enc(PL, pubKey(B)) p PS), Att >
=>
  < I : Attacker | agentsSeen: (A o OS), encrMsgsSeen: (enc(PL, pubKey(B)) p PS), Att >
  (msg enc(PL, pubKey(B)) from A to B)
if
  A =/= B /\ B =/= I
  .

crl [send-1-fake] :
  < I : Attacker | agentsSeen: (A o B o OS), noncesSeen: (Nonce n NS), Att >
=>
  < I : Attacker | agentsSeen: (A o B o OS), noncesSeen: (Nonce n NS), Att >
  (msg enc(Nonce ; A, pubKey(B)) from A to B)
if
  A =/= B /\ B =/= I
  .

crl [send-2-fake] :
  < I : Attacker | agentsSeen: (A o B o OS), noncesSeen: (Nonce n Nonce' n NS), Att >
=>
  < I : Attacker | agentsSeen: (A o B o OS), noncesSeen: (Nonce n Nonce' n NS), Att >
  (msg enc(Nonce ; Nonce', pubKey(A)) from B to A)
if
  A =/= B /\ A =/= I
  .

crl [send-3-fake] :
  < I : Attacker | agentsSeen: (A o B o OS), noncesSeen: (Nonce n NS), Att >
=>
  < I : Attacker | agentsSeen: (A o B o OS), noncesSeen: (Nonce n NS), Att >
  (msg enc(Nonce, pubKey(B)) from A to B)
if
  A =/= B /\ B =/= I
  .

subsort String < Oid .

op start : -> Configuration [ctor] .
eq start = 
  < "A" : Agent | nextNonce: 0, initSessions: notInitiated("B"), respSessions: emptySession >
  < "B" : Agent | nextNonce: 0, initSessions: emptySession, respSessions: emptySession >
  ---< "a" : Agent | initSessions: notInitiated("c"), respSessions: emptySession, nextNonce: 1 >
  ---< "Bank" : Agent | respSessions: emptySession, nextNonce: 1 >
  ---< "c" : Agent | initSessions: (notInitiated("Bank") notInitiated("a")), respSessions: emptySession, nextNonce: 1 >
  .

op attackerStart : -> Configuration [ctor] .
eq attackerStart =
  < "Scrooge" : Agent | initSessions: notInitiated("Attacker"), nextNonce: 1 >
  < "Bank" : Agent | respSessions: emptySession, nextNonce: 1 >
  < "Attacker" : Attacker | 
    initSessions: notInitiated("Bank"),
    respSessions: emptySession, 
    nextNonce: 1,
    agentsSeen: ("Scrooge" o "Bank"),
    noncesSeen: emptyNonceSet,
    encrMsgsSeen: emptyPayloadSet >  
  .

op midStart : -> Configuration [ctor] .
eq midStart =
 < "Attacker" : Attacker | nextNonce: 1,initSessions: notInitiated("Bank"),respSessions:
    emptySession,agentsSeen: ("Bank" o "Scrooge"),noncesSeen: nonce("Scrooge", 1),encrMsgsSeen: emptyPayloadSet > <
    "Bank" : Agent | nextNonce: 2,respSessions: responded("Scrooge", nonce("Bank", 1)) > < "Scrooge" : Agent |
    nextNonce: 2,initSessions: initiated("Attacker", nonce("Scrooge", 1)) > msg enc(nonce("Scrooge", 1) ; nonce(
    "Bank", 1), pubKey("Scrooge")) from "Bank" to "Scrooge"

  .


***(
  search [100] attackerStart =>* C:Configuration < "Bank" : Agent | respSessions: responded("Scrooge", N:Nonce), Att > .

Debug(6)> search [1] midStart =>* C:Configuration < "Bank" : Agent | respSessions: (trustedConnection("Scrooge") RS:RespSessions), Att > .
search [1] in PROTOCOL : midStart =>* C:Configuration < "Bank" : Agent | Att,respSessions: (RS trustedConnection(
    "Scrooge")) > .

Solution 1 (state 357946)
states: 357947  rewrites: 6178014 in 158352ms cpu (158350ms real) (39014 rewrites/second)
C:Configuration --> < "Attacker" : Attacker | nextNonce: 2,initSessions: initiated("Bank", nonce("Attacker", 1)),
    respSessions: emptySession,agentsSeen: ("Attacker" o "Bank" o "Scrooge"),noncesSeen: (nonce("Attacker", 1) n
    nonce("Bank", 1) n nonce("Scrooge", 1)),encrMsgsSeen: (enc(nonce("Attacker", 1) ; "Attacker", pubKey("Bank")) p
    enc(nonce("Scrooge", 1) ; nonce("Bank", 1), pubKey("Scrooge"))) > < "Scrooge" : Agent | nextNonce: 2,
    initSessions: trustedConnection("Attacker") >
Att --> nextNonce: 2
RS --> emptySession

state 357946, Configuration: < "Attacker" : Attacker | nextNonce: 2,initSessions: initiated("Bank", nonce("Attacker",
    1)),respSessions: emptySession,agentsSeen: ("Attacker" o "Bank" o "Scrooge"),noncesSeen: (nonce("Attacker", 1) n
    nonce("Bank", 1) n nonce("Scrooge", 1)),encrMsgsSeen: (enc(nonce("Attacker", 1) ; "Attacker", pubKey("Bank")) p
    enc(nonce("Scrooge", 1) ; nonce("Bank", 1), pubKey("Scrooge"))) > < "Bank" : Agent | nextNonce: 2,respSessions:
    trustedConnection("Scrooge") > < "Scrooge" : Agent | nextNonce: 2,initSessions: trustedConnection("Attacker") >

)

--- Drop duplicates
var MSG : Msg .
eq MSG MSG = MSG .

endm