load crypto.maude

mod PROTOCOL is
pr CRYPTO_OBJECTS .

sort MessageContent .
op msg_from_to_ : MessageContent Oid Oid -> Msg [ctor message] .

subsort Payload < MessageContent .

op _;_ : Payload Payload -> Payload [ctor] .

sort Nonce .
subsort Nonce < Payload .
op nonce : Oid Nat -> Nonce [ctor] .


sorts Sessions InitSessions .
subsort Sessions < InitSessions .
op emptySession : -> Sessions [ctor] .
op __ : InitSessions InitSessions -> InitSessions [ctor assoc comm id: emptySession] .
op __ : Sessions Sessions -> Sessions [ctor assoc comm id: emptySession] .
op notInitiated : Oid -> InitSessions [ctor] .
op initiated : Oid Nonce -> InitSessions [ctor] .
op trustedConnection : Oid -> Sessions [ctor] .

sort RespSessions .
subsort Sessions < RespSessions .
op _ _ : RespSessions RespSessions -> RespSessions [ctor assoc comm id: emptySession] .
op responded : Oid Nonce -> RespSessions [ctor] .

op Agent : -> Cid [ctor] .
op nextNonce:_ : Nat -> Attribute [ctor] .
op initSessions:_ : InitSessions -> Attribute [ctor] .
op respSessions:_ : RespSessions -> Attribute [ctor] .

vars A B : Oid .
vars IS : InitSessions .
vars RS : RespSessions .
vars N : Nat .
vars Att : AttributeSet .
vars Nonce Nonce' : Nonce .

op _inSession_ : Oid RespSessions -> Bool .
eq A inSession (responded(A, Nonce) RS) = true .
eq A inSession (trustedConnection(A) RS) = true .
eq A inSession RS = false [owise] .

--- Initiate
rl [send-1] :
  < A : Agent | initSessions: (notInitiated(B) IS), nextNonce: N, Att >
=>
  < A : Agent | initSessions: (initiated(B, nonce(A, N)) IS), nextNonce: s(N), Att >
  (msg enc(nonce(A, N) ; A, pubKey(B)) from A to B)
  .

rl [read-2-send-3] :
  (msg enc(Nonce ; Nonce', pubKey(A)) from B to A)
  < A : Agent | initSessions: (initiated(B, Nonce) IS), Att >
=>
  < A : Agent | initSessions: (trustedConnection(B) IS), Att >
  (msg enc(Nonce', pubKey(B)) from A to B)
  .

--- Respond
crl [read-1-send-2] :
  (msg enc(Nonce ; A, pubKey(B)) from A to B)
  < B : Agent | respSessions: RS, nextNonce: N, Att >
=>
  < B : Agent | respSessions: (responded(A, nonce(B, N)) RS), nextNonce: s(N), Att >
  (msg enc(Nonce ; nonce(B, N), pubKey(A)) from B to A)
if
  not A inSession RS
  .

rl [read-3] :
  (msg enc(Nonce, pubKey(B)) from A to B)
  < B : Agent | respSessions: (responded(A, Nonce) RS), Att >
=>
  < B : Agent | respSessions: (trustedConnection(A) RS), Att >
  .

subsort String < Oid .

op start : -> Configuration [ctor] .
eq start = 
  < "A" : Agent | nextNonce: 0, initSessions: notInitiated("B"), respSessions: emptySession >
  < "B" : Agent | nextNonce: 0, initSessions: emptySession, respSessions: emptySession >
  .

endm